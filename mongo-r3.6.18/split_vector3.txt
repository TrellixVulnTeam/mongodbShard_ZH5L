MongoDB shell version v3.6.18
connecting to: mongodb://10.20.16.165:50001/test?gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("e29ed545-6ce6-4db3-af60-b7a822e85cf8") }
MongoDB server version: 3.6.18
Server has startup warnings: 
2020-06-16T05:49:41.034+0000 I CONTROL  [main] 
2020-06-16T05:49:41.034+0000 I CONTROL  [main] ** WARNING: Access control is not enabled for the database.
2020-06-16T05:49:41.034+0000 I CONTROL  [main] **          Read and write access to data and configuration is unrestricted.
2020-06-16T05:49:41.034+0000 I CONTROL  [main] ** WARNING: You are running this process as the root user, which is not recommended.
2020-06-16T05:49:41.034+0000 I CONTROL  [main] 
mongos> use newDBd[9G[Juse newDB[18G[9G[Juse newD[17GB[9G[Juse newDB[18G
switched to db newDB
mongos> use [9G[Juse[12G[9G[Jus[11G[9G[Ju[10G[9G[J[9Guse[9G[Jus[11G[9G[Ju[10G[9G[J[9Gtu[9G[Jt[10G[9G[J[9G[9G[Juse newDB[18G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[JprintShardingSizes()[29G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[74G[9G[Juse newDB[18G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jfor (var i=420000; i<470000; i++) [1;34m{[0m db.newCol.insert({key: i})  }[73G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[72G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[71G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert[1;34m([0m{key: i})  }[70G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert([1;34m{[0mkey: i})  }[69G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[68G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[67G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[66G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[65G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[64G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[63G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i[1;34m}[0m)  }[62G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i}[1;34m)[0m  }[61G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[60G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[59G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[58G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[57G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[56G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[55G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[54G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[53G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[52G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[51G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[50G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[49G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[48G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[47G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[46G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[45G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[44G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  [1;34m}[0m[43G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[42G[9G[Jfor [1;34m([0mvar i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[41G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[40G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[39G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[38G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[37G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[36G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[35G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[34G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[33G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[32G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[31G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[30G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[29G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[28G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[27G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[26G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[25G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[24G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[23G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[22G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[21G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[20G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[21G[9G[Jfor (var i=420000; i<470000; i++) { db.newCol.insert({key: i})  }[22G[9G[Jfor (var i=40000; i<470000; i++) { db.newCol.insert({key: i})  }[21G[9G[Jfor (var i=470000; i<470000; i++) { db.newCol.insert({key: i})  }[22G[9G[Jfor (var i=470000; i<470000; i++) { db.newCol.insert({key: i})  }[23G[9G[Jfor (var i=470000; i<470000; i++) { db.newCol.insert({key: i})  }[24G[9G[Jfor (var i=470000; i<470000; i++) { db.newCol.insert({key: i})  }[25G[9G[Jfor (var i=470000; i<470000; i++) { db.newCol.insert({key: i})  }[26G[9G[Jfor (var i=470000; i<470000; i++) { db.newCol.insert({key: i})  }[27G[9G[Jfor (var i=470000; i<470000; i++) { db.newCol.insert({key: i})  }[28G[9G[Jfor (var i=470000; i<470000; i++) { db.newCol.insert({key: i})  }[29G[9G[Jfor (var i=470000; i<470000; i++) { db.newCol.insert({key: i})  }[30G[9G[Jfor (var i=470000; i<470000; i++) { db.newCol.insert({key: i})  }[31G[9G[Jfor (var i=470000; i<470000; i++) { db.newCol.insert({key: i})  }[32G[9G[Jfor (var i=470000; i<470000; i++) { db.newCol.insert({key: i})  }[33G[9G[Jfor (var i=470000; i<470000; i++) { db.newCol.insert({key: i})  }[32G[9G[Jfor (var i=470000; i<40000; i++) { db.newCol.insert({key: i})  }[31G[9G[Jfor (var i=470000; i<480000; i++) { db.newCol.insert({key: i})  }[32G[9G[Jfor (var i=470000; i<480000; i++) { db.newCol.insert({key: i})  }[74G
2020-06-16T05:50:32.191+0000 E QUERY    [thread1] Error: error doing query: failed: network error while attempting to run command 'insert' on host '10.20.16.165:50001'  :
DB.prototype.runCommand@src/mongo/shell/db.js:168:1
DBCollection.prototype._dbCommand@src/mongo/shell/collection.js:173:1
Bulk/executeBatch@src/mongo/shell/bulk_api.js:903:22
Bulk/this.execute@src/mongo/shell/bulk_api.js:1154:21
DBCollection.prototype.insert@src/mongo/shell/collection.js:317:22
@(shell):1:46
2020-06-16T05:50:32.193+0000 I NETWORK  [thread1] trying reconnect to 10.20.16.165:50001 (10.20.16.165) failed
2020-06-16T05:50:32.193+0000 W NETWORK  [thread1] Failed to connect to 10.20.16.165:50001, in(checking socket for error after poll), reason: Connection refused
2020-06-16T05:50:32.193+0000 I NETWORK  [thread1] reconnect 10.20.16.165:50001 (10.20.16.165) failed failed 
2020-06-16T05:50:32.196+0000 I NETWORK  [thread1] trying reconnect to 10.20.16.165:50001 (10.20.16.165) failed
2020-06-16T05:50:32.196+0000 W NETWORK  [thread1] Failed to connect to 10.20.16.165:50001, in(checking socket for error after poll), reason: Connection refused
2020-06-16T05:50:32.196+0000 I NETWORK  [thread1] reconnect 10.20.16.165:50001 (10.20.16.165) failed failed 
> [3G[Jfor (var i=470000; i<480000; i++) { db.newCol.insert({key: i})  }[68G[3G[J[3G