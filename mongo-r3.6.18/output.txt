MongoDB shell version v3.6.18
connecting to: mongodb://10.20.16.165:50001/test?gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("1ed98d0f-a85d-452d-a51b-b6ca10dc66e9") }
MongoDB server version: 3.6.18
Server has startup warnings: 
2020-06-16T11:05:20.261+0000 I CONTROL  [main] 
2020-06-16T11:05:20.261+0000 I CONTROL  [main] ** WARNING: Access control is not enabled for the database.
2020-06-16T11:05:20.261+0000 I CONTROL  [main] **          Read and write access to data and configuration is unrestricted.
2020-06-16T11:05:20.261+0000 I CONTROL  [main] ** WARNING: You are running this process as the root user, which is not recommended.
2020-06-16T11:05:20.261+0000 I CONTROL  [main] 
mongos> hee[9G[Jhe[11G[9G[Jh[10G[9G[J[9Guse newDB[9G[Juse newDB[18G
switched to db newDB
mongos> [9G[Juse newDB[18G[9G[Jdb.items.createIndex({"index": "hashed"})[50G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jfor (var i=100000; i<150000; i++) [1;34m{[0m db.newCol.insert({key: i})  }[73G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[72G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[71G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert[1;34m([0m{key: i})  }[70G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert([1;34m{[0mkey: i})  }[69G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[68G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[67G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[66G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[65G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[64G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[63G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i[1;34m}[0m)  }[62G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i}[1;34m)[0m  }[61G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[60G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[59G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[58G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[57G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[56G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[55G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[54G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[53G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[52G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[51G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[50G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[49G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[48G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[47G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[46G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[45G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[44G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  [1;34m}[0m[43G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[42G[9G[Jfor [1;34m([0mvar i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[41G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[40G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[39G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[38G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[37G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[36G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[35G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[34G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[33G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[32G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[31G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[30G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[29G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[28G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[27G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[26G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[25G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[24G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[23G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[22G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[21G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[20G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[19G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[20G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[21G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[22G[9G[Jfor (var i=10000; i<150000; i++) { db.newCol.insert({key: i})  }[21G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[22G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[23G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[24G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[25G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[26G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[27G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[28G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[29G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[30G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[31G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[32G[9G[Jfor (var i=140000; i<10000; i++) { db.newCol.insert({key: i})  }[31G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[32G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[74G
WriteResult({ "nInserted" : 1 })
mongos> [9G[J[9Gmongos> [9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[74G[9G[Juse newDB[18G[9G[Jdb.items.createIndex({"index": "hashed"})[50G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=500000; i<550000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jdb.adminCommand( {getLog: "global"} )[46G

{
	"totalLinesWritten" : 1450066,
	"log" : [
		"2020-06-16T11:07:53.643+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.643+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.643+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.643+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.643+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182455",
		"2020-06-16T11:07:53.643+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.643+0000 I SHARDING [conn1] heejin_ return: 49965",
		"2020-06-16T11:07:53.644+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.644+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f34'), key: 189965.0 } ] }",
		"2020-06-16T11:07:53.644+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f34'), key: 189965.0 } ] }",
		"2020-06-16T11:07:53.644+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.644+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.644+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f34'), key: 189965.0 } }",
		"2020-06-16T11:07:53.644+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f34'), key: 189965.0 }",
		"2020-06-16T11:07:53.644+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189965",
		"2020-06-16T11:07:53.644+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49966",
		"2020-06-16T11:07:53.644+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.644+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.644+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.644+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.644+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] heejjin splitIFNEED: 189965",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] heejjin get split sum : 8.24352e+09",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49966",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182490",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182490",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182490",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.645+0000 I SHARDING [conn1] heejin_ return: 49966",
		"2020-06-16T11:07:53.646+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.646+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f35'), key: 189966.0 } ] }",
		"2020-06-16T11:07:53.646+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f35'), key: 189966.0 } ] }",
		"2020-06-16T11:07:53.646+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.646+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.646+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f35'), key: 189966.0 } }",
		"2020-06-16T11:07:53.646+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f35'), key: 189966.0 }",
		"2020-06-16T11:07:53.646+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189966",
		"2020-06-16T11:07:53.646+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49967",
		"2020-06-16T11:07:53.646+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.646+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.646+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.646+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.646+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejjin splitIFNEED: 189966",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejjin get split sum : 8.24371e+09",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49967",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182525",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182525",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182525",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejin_ return: 49967",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f36'), key: 189967.0 } ] }",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f36'), key: 189967.0 } ] }",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f36'), key: 189967.0 } }",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f36'), key: 189967.0 }",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189967",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49968",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.647+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] heejjin splitIFNEED: 189967",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] heejjin get split sum : 8.2439e+09",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49968",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182560",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182560",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182560",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.648+0000 I SHARDING [conn1] heejin_ return: 49968",
		"2020-06-16T11:07:53.649+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.649+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f37'), key: 189968.0 } ] }",
		"2020-06-16T11:07:53.649+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f37'), key: 189968.0 } ] }",
		"2020-06-16T11:07:53.649+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.649+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.649+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f37'), key: 189968.0 } }",
		"2020-06-16T11:07:53.649+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f37'), key: 189968.0 }",
		"2020-06-16T11:07:53.649+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189968",
		"2020-06-16T11:07:53.649+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49969",
		"2020-06-16T11:07:53.649+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.649+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.649+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.649+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.649+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] heejjin splitIFNEED: 189968",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] heejjin get split sum : 8.24409e+09",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49969",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182595",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182595",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182595",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.650+0000 I SHARDING [conn1] heejin_ return: 49969",
		"2020-06-16T11:07:53.651+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.651+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f38'), key: 189969.0 } ] }",
		"2020-06-16T11:07:53.651+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f38'), key: 189969.0 } ] }",
		"2020-06-16T11:07:53.651+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.651+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.651+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f38'), key: 189969.0 } }",
		"2020-06-16T11:07:53.651+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f38'), key: 189969.0 }",
		"2020-06-16T11:07:53.651+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189969",
		"2020-06-16T11:07:53.651+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49970",
		"2020-06-16T11:07:53.651+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.651+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.651+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.651+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.651+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] heejjin splitIFNEED: 189969",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] heejjin get split sum : 8.24428e+09",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49970",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182630",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182630",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182630",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.652+0000 I SHARDING [conn1] heejin_ return: 49970",
		"2020-06-16T11:07:53.653+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.653+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f39'), key: 189970.0 } ] }",
		"2020-06-16T11:07:53.653+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f39'), key: 189970.0 } ] }",
		"2020-06-16T11:07:53.653+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.653+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.653+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f39'), key: 189970.0 } }",
		"2020-06-16T11:07:53.653+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f39'), key: 189970.0 }",
		"2020-06-16T11:07:53.653+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189970",
		"2020-06-16T11:07:53.653+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49971",
		"2020-06-16T11:07:53.653+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.653+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.653+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.653+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.653+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] heejjin splitIFNEED: 189970",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] heejjin get split sum : 8.24447e+09",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49971",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182665",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182665",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182665",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.654+0000 I SHARDING [conn1] heejin_ return: 49971",
		"2020-06-16T11:07:53.655+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.655+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f3a'), key: 189971.0 } ] }",
		"2020-06-16T11:07:53.655+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f3a'), key: 189971.0 } ] }",
		"2020-06-16T11:07:53.655+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.655+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.655+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f3a'), key: 189971.0 } }",
		"2020-06-16T11:07:53.655+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f3a'), key: 189971.0 }",
		"2020-06-16T11:07:53.655+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189971",
		"2020-06-16T11:07:53.655+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49972",
		"2020-06-16T11:07:53.655+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.655+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.655+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.655+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.655+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] heejjin splitIFNEED: 189971",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] heejjin get split sum : 8.24466e+09",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49972",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182700",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182700",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182700",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.656+0000 I SHARDING [conn1] heejin_ return: 49972",
		"2020-06-16T11:07:53.657+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.657+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f3b'), key: 189972.0 } ] }",
		"2020-06-16T11:07:53.657+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f3b'), key: 189972.0 } ] }",
		"2020-06-16T11:07:53.657+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.657+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.657+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f3b'), key: 189972.0 } }",
		"2020-06-16T11:07:53.657+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f3b'), key: 189972.0 }",
		"2020-06-16T11:07:53.657+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189972",
		"2020-06-16T11:07:53.657+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49973",
		"2020-06-16T11:07:53.657+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.657+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.657+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.657+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.657+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] heejjin splitIFNEED: 189972",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] heejjin get split sum : 8.24485e+09",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49973",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182735",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182735",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182735",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] heejin_ return: 49973",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f3c'), key: 189973.0 } ] }",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f3c'), key: 189973.0 } ] }",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.658+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f3c'), key: 189973.0 } }",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f3c'), key: 189973.0 }",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189973",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49974",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] heejjin splitIFNEED: 189973",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] heejjin get split sum : 8.24504e+09",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49974",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182770",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.659+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182770",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182770",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] heejin_ return: 49974",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f3d'), key: 189974.0 } ] }",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f3d'), key: 189974.0 } ] }",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f3d'), key: 189974.0 } }",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f3d'), key: 189974.0 }",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189974",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49975",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.660+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] heejjin splitIFNEED: 189974",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] heejjin get split sum : 8.24523e+09",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49975",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182805",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182805",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182805",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.661+0000 I SHARDING [conn1] heejin_ return: 49975",
		"2020-06-16T11:07:53.662+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.662+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f3e'), key: 189975.0 } ] }",
		"2020-06-16T11:07:53.662+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f3e'), key: 189975.0 } ] }",
		"2020-06-16T11:07:53.662+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.662+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.662+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f3e'), key: 189975.0 } }",
		"2020-06-16T11:07:53.662+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f3e'), key: 189975.0 }",
		"2020-06-16T11:07:53.662+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189975",
		"2020-06-16T11:07:53.662+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49976",
		"2020-06-16T11:07:53.662+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.662+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.662+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.662+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.662+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] heejjin splitIFNEED: 189975",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] heejjin get split sum : 8.24542e+09",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49976",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182840",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182840",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182840",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.663+0000 I SHARDING [conn1] heejin_ return: 49976",
		"2020-06-16T11:07:53.664+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.664+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f3f'), key: 189976.0 } ] }",
		"2020-06-16T11:07:53.664+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f3f'), key: 189976.0 } ] }",
		"2020-06-16T11:07:53.664+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.664+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.664+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f3f'), key: 189976.0 } }",
		"2020-06-16T11:07:53.664+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f3f'), key: 189976.0 }",
		"2020-06-16T11:07:53.664+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189976",
		"2020-06-16T11:07:53.664+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49977",
		"2020-06-16T11:07:53.664+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.664+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.664+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.664+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.664+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] heejjin splitIFNEED: 189976",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] heejjin get split sum : 8.24561e+09",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49977",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182875",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182875",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182875",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.665+0000 I SHARDING [conn1] heejin_ return: 49977",
		"2020-06-16T11:07:53.666+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.666+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f40'), key: 189977.0 } ] }",
		"2020-06-16T11:07:53.666+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f40'), key: 189977.0 } ] }",
		"2020-06-16T11:07:53.666+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.666+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.666+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f40'), key: 189977.0 } }",
		"2020-06-16T11:07:53.666+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f40'), key: 189977.0 }",
		"2020-06-16T11:07:53.666+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189977",
		"2020-06-16T11:07:53.666+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49978",
		"2020-06-16T11:07:53.666+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.666+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.666+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.666+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.666+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] heejjin splitIFNEED: 189977",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] heejjin get split sum : 8.2458e+09",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49978",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182910",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182910",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182910",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] heejin_ return: 49978",
		"2020-06-16T11:07:53.667+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.668+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f41'), key: 189978.0 } ] }",
		"2020-06-16T11:07:53.668+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f41'), key: 189978.0 } ] }",
		"2020-06-16T11:07:53.668+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.668+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.668+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f41'), key: 189978.0 } }",
		"2020-06-16T11:07:53.668+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f41'), key: 189978.0 }",
		"2020-06-16T11:07:53.668+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189978",
		"2020-06-16T11:07:53.668+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49979",
		"2020-06-16T11:07:53.668+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.668+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.668+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.668+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.668+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] heejjin splitIFNEED: 189978",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] heejjin get split sum : 8.24599e+09",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49979",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182945",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182945",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182945",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] heejin_ return: 49979",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f42'), key: 189979.0 } ] }",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f42'), key: 189979.0 } ] }",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.669+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f42'), key: 189979.0 } }",
		"2020-06-16T11:07:53.670+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f42'), key: 189979.0 }",
		"2020-06-16T11:07:53.670+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189979",
		"2020-06-16T11:07:53.670+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49980",
		"2020-06-16T11:07:53.670+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.670+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.670+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.670+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.670+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.670+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] heejjin splitIFNEED: 189979",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] heejjin get split sum : 8.24618e+09",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49980",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 182980",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182980",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 182980",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] heejin_ return: 49980",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f43'), key: 189980.0 } ] }",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f43'), key: 189980.0 } ] }",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f43'), key: 189980.0 } }",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f43'), key: 189980.0 }",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189980",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49981",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.671+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.672+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.672+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.672+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.672+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.672+0000 I SHARDING [conn1] heejjin splitIFNEED: 189980",
		"2020-06-16T11:07:53.672+0000 I SHARDING [conn1] heejjin get split sum : 8.24637e+09",
		"2020-06-16T11:07:53.672+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49981",
		"2020-06-16T11:07:53.672+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.672+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183015",
		"2020-06-16T11:07:53.672+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183015",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183015",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] heejin_ return: 49981",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f44'), key: 189981.0 } ] }",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f44'), key: 189981.0 } ] }",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f44'), key: 189981.0 } }",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f44'), key: 189981.0 }",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189981",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49982",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.673+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] heejjin splitIFNEED: 189981",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] heejjin get split sum : 8.24656e+09",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49982",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183050",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183050",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183050",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.674+0000 I SHARDING [conn1] heejin_ return: 49982",
		"2020-06-16T11:07:53.675+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.675+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f45'), key: 189982.0 } ] }",
		"2020-06-16T11:07:53.675+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f45'), key: 189982.0 } ] }",
		"2020-06-16T11:07:53.675+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.675+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.675+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f45'), key: 189982.0 } }",
		"2020-06-16T11:07:53.675+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f45'), key: 189982.0 }",
		"2020-06-16T11:07:53.675+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189982",
		"2020-06-16T11:07:53.675+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49983",
		"2020-06-16T11:07:53.675+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.675+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.675+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.675+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.675+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] heejjin splitIFNEED: 189982",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] heejjin get split sum : 8.24675e+09",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49983",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183085",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183085",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183085",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] heejin_ return: 49983",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f46'), key: 189983.0 } ] }",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f46'), key: 189983.0 } ] }",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f46'), key: 189983.0 } }",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f46'), key: 189983.0 }",
		"2020-06-16T11:07:53.676+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189983",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49984",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejjin splitIFNEED: 189983",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejjin get split sum : 8.24694e+09",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49984",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183120",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183120",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183120",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.677+0000 I SHARDING [conn1] heejin_ return: 49984",
		"2020-06-16T11:07:53.678+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.678+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f47'), key: 189984.0 } ] }",
		"2020-06-16T11:07:53.678+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f47'), key: 189984.0 } ] }",
		"2020-06-16T11:07:53.678+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.678+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.678+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f47'), key: 189984.0 } }",
		"2020-06-16T11:07:53.678+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f47'), key: 189984.0 }",
		"2020-06-16T11:07:53.678+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189984",
		"2020-06-16T11:07:53.678+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49985",
		"2020-06-16T11:07:53.678+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.678+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.678+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.678+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.678+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] heejjin splitIFNEED: 189984",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] heejjin get split sum : 8.24713e+09",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49985",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183155",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183155",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183155",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.679+0000 I SHARDING [conn1] heejin_ return: 49985",
		"2020-06-16T11:07:53.680+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.680+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f48'), key: 189985.0 } ] }",
		"2020-06-16T11:07:53.680+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f48'), key: 189985.0 } ] }",
		"2020-06-16T11:07:53.680+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.680+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.680+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f48'), key: 189985.0 } }",
		"2020-06-16T11:07:53.680+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f48'), key: 189985.0 }",
		"2020-06-16T11:07:53.680+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189985",
		"2020-06-16T11:07:53.680+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49986",
		"2020-06-16T11:07:53.680+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.680+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.680+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.680+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.680+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] heejjin splitIFNEED: 189985",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] heejjin get split sum : 8.24732e+09",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49986",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183190",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183190",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183190",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] heejin_ return: 49986",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f49'), key: 189986.0 } ] }",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f49'), key: 189986.0 } ] }",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f49'), key: 189986.0 } }",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f49'), key: 189986.0 }",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189986",
		"2020-06-16T11:07:53.681+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49987",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejjin splitIFNEED: 189986",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejjin get split sum : 8.24751e+09",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49987",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183225",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183225",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183225",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.682+0000 I SHARDING [conn1] heejin_ return: 49987",
		"2020-06-16T11:07:53.683+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.683+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f4a'), key: 189987.0 } ] }",
		"2020-06-16T11:07:53.683+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f4a'), key: 189987.0 } ] }",
		"2020-06-16T11:07:53.683+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.683+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.683+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f4a'), key: 189987.0 } }",
		"2020-06-16T11:07:53.683+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f4a'), key: 189987.0 }",
		"2020-06-16T11:07:53.683+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189987",
		"2020-06-16T11:07:53.683+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49988",
		"2020-06-16T11:07:53.683+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.683+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.683+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.683+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.683+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] heejjin splitIFNEED: 189987",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] heejjin get split sum : 8.2477e+09",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49988",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183260",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183260",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183260",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.684+0000 I SHARDING [conn1] heejin_ return: 49988",
		"2020-06-16T11:07:53.685+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.685+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f4b'), key: 189988.0 } ] }",
		"2020-06-16T11:07:53.685+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f4b'), key: 189988.0 } ] }",
		"2020-06-16T11:07:53.685+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.685+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.685+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f4b'), key: 189988.0 } }",
		"2020-06-16T11:07:53.685+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f4b'), key: 189988.0 }",
		"2020-06-16T11:07:53.685+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189988",
		"2020-06-16T11:07:53.685+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49989",
		"2020-06-16T11:07:53.685+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.685+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.685+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.685+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.685+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] heejjin splitIFNEED: 189988",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] heejjin get split sum : 8.24789e+09",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49989",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183295",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183295",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183295",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] heejin_ return: 49989",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f4c'), key: 189989.0 } ] }",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f4c'), key: 189989.0 } ] }",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f4c'), key: 189989.0 } }",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f4c'), key: 189989.0 }",
		"2020-06-16T11:07:53.686+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189989",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49990",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejjin splitIFNEED: 189989",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejjin get split sum : 8.24808e+09",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49990",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183330",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183330",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183330",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.687+0000 I SHARDING [conn1] heejin_ return: 49990",
		"2020-06-16T11:07:53.688+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.688+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f4d'), key: 189990.0 } ] }",
		"2020-06-16T11:07:53.688+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f4d'), key: 189990.0 } ] }",
		"2020-06-16T11:07:53.688+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.688+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.688+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f4d'), key: 189990.0 } }",
		"2020-06-16T11:07:53.688+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f4d'), key: 189990.0 }",
		"2020-06-16T11:07:53.688+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189990",
		"2020-06-16T11:07:53.688+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49991",
		"2020-06-16T11:07:53.688+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.688+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.688+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.688+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.688+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] heejjin splitIFNEED: 189990",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] heejjin get split sum : 8.24827e+09",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49991",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183365",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183365",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183365",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.689+0000 I SHARDING [conn1] heejin_ return: 49991",
		"2020-06-16T11:07:53.690+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.690+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f4e'), key: 189991.0 } ] }",
		"2020-06-16T11:07:53.690+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f4e'), key: 189991.0 } ] }",
		"2020-06-16T11:07:53.690+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.690+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.690+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f4e'), key: 189991.0 } }",
		"2020-06-16T11:07:53.690+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f4e'), key: 189991.0 }",
		"2020-06-16T11:07:53.690+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189991",
		"2020-06-16T11:07:53.690+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49992",
		"2020-06-16T11:07:53.690+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.690+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.690+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.690+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.690+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] heejjin splitIFNEED: 189991",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] heejjin get split sum : 8.24846e+09",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49992",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183400",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183400",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183400",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.691+0000 I SHARDING [conn1] heejin_ return: 49992",
		"2020-06-16T11:07:53.692+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.692+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f4f'), key: 189992.0 } ] }",
		"2020-06-16T11:07:53.692+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f4f'), key: 189992.0 } ] }",
		"2020-06-16T11:07:53.692+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.692+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.692+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f4f'), key: 189992.0 } }",
		"2020-06-16T11:07:53.692+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f4f'), key: 189992.0 }",
		"2020-06-16T11:07:53.692+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189992",
		"2020-06-16T11:07:53.692+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49993",
		"2020-06-16T11:07:53.692+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.692+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.692+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.692+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.692+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] heejjin splitIFNEED: 189992",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] heejjin get split sum : 8.24865e+09",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49993",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183435",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183435",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183435",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.693+0000 I SHARDING [conn1] heejin_ return: 49993",
		"2020-06-16T11:07:53.694+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.694+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f50'), key: 189993.0 } ] }",
		"2020-06-16T11:07:53.694+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f50'), key: 189993.0 } ] }",
		"2020-06-16T11:07:53.694+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.694+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.694+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f50'), key: 189993.0 } }",
		"2020-06-16T11:07:53.694+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f50'), key: 189993.0 }",
		"2020-06-16T11:07:53.694+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189993",
		"2020-06-16T11:07:53.694+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49994",
		"2020-06-16T11:07:53.694+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.694+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.694+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.694+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.694+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] heejjin splitIFNEED: 189993",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] heejjin get split sum : 8.24884e+09",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49994",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183470",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183470",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183470",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.695+0000 I SHARDING [conn1] heejin_ return: 49994",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f51'), key: 189994.0 } ] }",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f51'), key: 189994.0 } ] }",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f51'), key: 189994.0 } }",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f51'), key: 189994.0 }",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189994",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49995",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.696+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejjin splitIFNEED: 189994",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejjin get split sum : 8.24903e+09",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49995",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183505",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183505",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183505",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejin_ return: 49995",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f52'), key: 189995.0 } ] }",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f52'), key: 189995.0 } ] }",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f52'), key: 189995.0 } }",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f52'), key: 189995.0 }",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189995",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49996",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.697+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] heejjin splitIFNEED: 189995",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] heejjin get split sum : 8.24922e+09",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49996",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183540",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183540",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183540",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.698+0000 I SHARDING [conn1] heejin_ return: 49996",
		"2020-06-16T11:07:53.699+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.699+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f53'), key: 189996.0 } ] }",
		"2020-06-16T11:07:53.699+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f53'), key: 189996.0 } ] }",
		"2020-06-16T11:07:53.699+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.699+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.699+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f53'), key: 189996.0 } }",
		"2020-06-16T11:07:53.699+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f53'), key: 189996.0 }",
		"2020-06-16T11:07:53.699+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189996",
		"2020-06-16T11:07:53.699+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49997",
		"2020-06-16T11:07:53.699+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.699+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.699+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.699+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.699+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] heejjin splitIFNEED: 189996",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] heejjin get split sum : 8.24941e+09",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49997",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183575",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183575",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183575",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.700+0000 I SHARDING [conn1] heejin_ return: 49997",
		"2020-06-16T11:07:53.701+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.701+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f54'), key: 189997.0 } ] }",
		"2020-06-16T11:07:53.701+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f54'), key: 189997.0 } ] }",
		"2020-06-16T11:07:53.701+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.701+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.701+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f54'), key: 189997.0 } }",
		"2020-06-16T11:07:53.701+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f54'), key: 189997.0 }",
		"2020-06-16T11:07:53.701+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189997",
		"2020-06-16T11:07:53.701+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49998",
		"2020-06-16T11:07:53.701+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.701+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.701+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.701+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.701+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejjin splitIFNEED: 189997",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejjin get split sum : 8.2496e+09",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49998",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183610",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183610",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183610",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejin_ return: 49998",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f55'), key: 189998.0 } ] }",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f55'), key: 189998.0 } ] }",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f55'), key: 189998.0 } }",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f55'), key: 189998.0 }",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189998",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 49999",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.702+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.703+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.703+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.703+0000 I SHARDING [conn1] heejjin splitIFNEED: 189998",
		"2020-06-16T11:07:53.703+0000 I SHARDING [conn1] heejjin get split sum : 8.24979e+09",
		"2020-06-16T11:07:53.703+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 49999",
		"2020-06-16T11:07:53.703+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.703+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183645",
		"2020-06-16T11:07:53.703+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.703+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183645",
		"2020-06-16T11:07:53.703+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183645",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] heejin_ return: 49999",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] jinnnn ClusterWriter::write newDB.newCol",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] jin endpoints during shard request: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f56'), key: 189999.0 } ] }",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] jin endpoints during shard response: { insert: \"newCol\", bypassDocumentValidation: false, ordered: true, documents: [ { _id: ObjectId('5ee8a80991ee8169bb7f0f56'), key: 189999.0 } ] }",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] jin endpoints during shard response nField: 4",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] jin element in!!!!!",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] jin endpoints during shard response getOwned: { 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f56'), key: 189999.0 } }",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] jin endpoints during shard response getObject(zero): 0: { _id: ObjectId('5ee8a80991ee8169bb7f0f56'), key: 189999.0 }",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] jin endpoints during shard response getObject(key): 189999",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, globalINT : 50000",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, numWritOps : 1",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writes count : 0",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, writeSizeBytes : 42",
		"2020-06-16T11:07:53.704+0000 I SHARDING [conn1] heejins order : BatchWriteOp::targetBatch, : getWriteSizeBytes(writeOp)35",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] heejin) findIntersectingChunk",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] heejjin splitIFNEED: 189999",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] heejjin get split sum : 8.24998e+09",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] jin!!! updateChunkWriteStatsAndSplitIfNeeded: 50000",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] jin!!! addBytesWritten(dataWritten) 35",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] jin!!! addBytesWritten(chunkBytesWritten) 183680",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] jin!! global split 9",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183680",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] heejjin error 1: 1048576",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] heejjin error 1: minIsInf",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] heejjin error 1 : maxIsInf",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] heejjin shouldSplit datawrittenbytes: 183680",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] heejjin shouldSplit jumbo: 0",
		"2020-06-16T11:07:53.705+0000 I SHARDING [conn1] heejin_ return: 50000",
		"2020-06-16T11:08:03.493+0000 I SHARDING [Uptime reporter]  Shard::runBatchWriteCommand config",
		"2020-06-16T11:08:03.537+0000 I SHARDING [Uptime reporter] WRITE DONE??? "
	],
	"ok" : 1,
	"operationTime" : Timestamp(1592305683, 1),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1592305683, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
mongos> sh.status()[9G[Jsh.status()[20G
--- Sharding Status --- 
  sharding version: {
  	"_id" : 1,
  	"minCompatibleVersion" : 5,
  	"currentVersion" : 6,
  	"clusterId" : ObjectId("5ed775806cd1a72e8d0f9c42")
  }
  shards:
        {  "_id" : "apple",  "host" : "apple/10.20.16.110:30001,10.20.16.111:30001,10.20.16.165:30001",  "state" : 1 }
        {  "_id" : "banana",  "host" : "banana/10.20.16.110:30002,10.20.16.111:30002,10.20.16.112:30002",  "state" : 1 }
        {  "_id" : "mango",  "host" : "mango/10.20.16.111:30003,10.20.16.112:30003,10.20.16.115:30003",  "state" : 1 }
  active mongoses:
        "3.6.18" : 1
  autosplit:
        Currently enabled: yes
  balancer:
        Currently enabled:  yes
        Currently running:  no
        Failed balancer rounds in last 5 attempts:  0
        Migration Results for the last 24 hours: 
                28 : Success
                1 : Failed with error 'aborted', from banana to mango
                1 : Failed with error 'aborted', from mango to apple
  databases:
        {  "_id" : "config",  "primary" : "config",  "partitioned" : true }
                config.system.sessions
                        shard key: { "_id" : 1 }
                        unique: false
                        balancing: true
                        chunks:
                                apple	1
                        { "_id" : { "$minKey" : 1 } } -->> { "_id" : { "$maxKey" : 1 } } on : apple Timestamp(1, 0) 
        {  "_id" : "heeijn_test",  "primary" : "apple",  "partitioned" : false }
        {  "_id" : "heejin_test",  "primary" : "banana",  "partitioned" : true }
                heejin_test.heejin_col
                        shard key: { "key" : 1 }
                        unique: false
                        balancing: true
                        chunks:
                                apple	16
                                banana	16
                                mango	16
                        too many chunks to print, use verbose if you want to force print
        {  "_id" : "mall",  "primary" : "banana",  "partitioned" : true }
                mall.product
                        shard key: { "p_id" : 1, "p_name" : 1 }
                        unique: false
                        balancing: true
                        chunks:
                                apple	35
                                banana	34
                                mango	34
                        too many chunks to print, use verbose if you want to force print
        {  "_id" : "newDB",  "primary" : "apple",  "partitioned" : true }
                newDB.newCol
                        shard key: { "key" : 1 }
                        unique: false
                        balancing: true
                        chunks:
                                apple	1
                        { "key" : { "$minKey" : 1 } } -->> { "key" : { "$maxKey" : 1 } } on : apple Timestamp(1, 0) 
        {  "_id" : "test",  "primary" : "banana",  "partitioned" : false }

mongos> [9G[Jsh.status()[20G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jsh.status()[20G[9G[J[9Guse newDB[9G[Juse newDB[18G
switched to db newDB
mongos> [9G[Juse newDB[18G[9G[Jsh.status()[20G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jfor (var i=140000; i<190000; i++) [1;34m{[0m db.newCol.insert({key: i})  }[73G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[72G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[71G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert[1;34m([0m{key: i})  }[70G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert([1;34m{[0mkey: i})  }[69G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[68G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[67G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[66G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[65G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[64G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[63G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i[1;34m}[0m)  }[62G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i}[1;34m)[0m  }[61G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[60G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[59G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[58G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[57G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[56G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[55G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[54G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[53G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[52G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[51G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[50G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[49G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[48G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[47G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[46G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[45G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[44G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  [1;34m}[0m[43G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[42G[9G[Jfor [1;34m([0mvar i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[41G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[40G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[39G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[38G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[37G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[36G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[35G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[34G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[33G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[32G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[31G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[32G[9G[Jfor (var i=140000; i<10000; i++) { db.newCol.insert({key: i})  }[31G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[32G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[74G
WriteResult({ "nInserted" : 1 })
mongos> [9G[J[9Gmongos> [9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Juse newDB[18G[9G[Jsh.status()[20G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jsh.status()[20G[9G[Jsh.status()[20G

--- Sharding Status --- 
  sharding version: {
  	"_id" : 1,
  	"minCompatibleVersion" : 5,
  	"currentVersion" : 6,
  	"clusterId" : ObjectId("5ed775806cd1a72e8d0f9c42")
  }
  shards:
        {  "_id" : "apple",  "host" : "apple/10.20.16.110:30001,10.20.16.111:30001,10.20.16.165:30001",  "state" : 1 }
        {  "_id" : "banana",  "host" : "banana/10.20.16.110:30002,10.20.16.111:30002,10.20.16.112:30002",  "state" : 1 }
        {  "_id" : "mango",  "host" : "mango/10.20.16.111:30003,10.20.16.112:30003,10.20.16.115:30003",  "state" : 1 }
  active mongoses:
        "3.6.18" : 1
  autosplit:
        Currently enabled: yes
  balancer:
        Currently enabled:  yes
        Currently running:  no
        Failed balancer rounds in last 5 attempts:  0
        Migration Results for the last 24 hours: 
                28 : Success
                1 : Failed with error 'aborted', from banana to mango
                1 : Failed with error 'aborted', from mango to apple
  databases:
        {  "_id" : "config",  "primary" : "config",  "partitioned" : true }
                config.system.sessions
                        shard key: { "_id" : 1 }
                        unique: false
                        balancing: true
                        chunks:
                                apple	1
                        { "_id" : { "$minKey" : 1 } } -->> { "_id" : { "$maxKey" : 1 } } on : apple Timestamp(1, 0) 
        {  "_id" : "heeijn_test",  "primary" : "apple",  "partitioned" : false }
        {  "_id" : "heejin_test",  "primary" : "banana",  "partitioned" : true }
                heejin_test.heejin_col
                        shard key: { "key" : 1 }
                        unique: false
                        balancing: true
                        chunks:
                                apple	16
                                banana	16
                                mango	16
                        too many chunks to print, use verbose if you want to force print
        {  "_id" : "mall",  "primary" : "banana",  "partitioned" : true }
                mall.product
                        shard key: { "p_id" : 1, "p_name" : 1 }
                        unique: false
                        balancing: true
                        chunks:
                                apple	35
                                banana	34
                                mango	34
                        too many chunks to print, use verbose if you want to force print
        {  "_id" : "newDB",  "primary" : "apple",  "partitioned" : true }
                newDB.newCol
                        shard key: { "key" : 1 }
                        unique: false
                        balancing: true
                        chunks:
                                apple	1
                        { "key" : { "$minKey" : 1 } } -->> { "key" : { "$maxKey" : 1 } } on : apple Timestamp(1, 0) 
        {  "_id" : "test",  "primary" : "banana",  "partitioned" : false }

mongos> use a[9G[Juse [13G[9G[Juse[12G[9G[Jus[11G[9G[Ju[10G[9G[J[9Gdb.dropDatabase()[9G[Jdb.dropDatabase()[26G
{
	"dropped" : "newDB",
	"ok" : 1,
	"operationTime" : Timestamp(1592305878, 17),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1592305878, 17),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
mongos> use admin[9G[Juse admin[18G
switched to db admin
mongos> [9G[Juse admin[18G[9G[Jdb.dropDatabase()[26G[9G[Jsh.status()[20G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Juse newDB[18G[9G[Jsh.status()[20G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[74G[9G[Juse newDB[18G[9G[Jdb.items.createIndex({"index": "hashed"})[50G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=500000; i<550000; i++) { db.newCol.insert({key: i})  }[74G[9G[Juse newDB[18G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[53G[9G[Juse admin[18G[9G[Jdb.newCol.createIndex({key: 1 })[41G[9G[Juse admin[18G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[53G[9G[Juse admin[18G[9G[Jdb.newCol.createIndex({key: 1 })[41G[9G[Juse newDB[18G[9G[Jdb.newCol.createIndex({key: 1 })[41G[9G[Jsh.enableSharding("newDB")[35G[9G[Juse admin[18G[9G[Jsh.enableSharding("newDB")[35G[9G[Jsh.enableSharding("newDB")[35G
{
	"ok" : 1,
	"operationTime" : Timestamp(1592305891, 6),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1592305891, 6),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
mongos> use newDB[9G[Juse newDB[18G
switched to db newDB
mongos> sh.[9G[Juse newDB[18G[9G[Jsh.enableSharding("newDB")[35G[9G[Juse admin[18G[9G[Jdb.dropDatabase()[26G[9G[Jsh.status()[20G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Juse newDB[18G[9G[Jsh.status()[20G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[74G[9G[Juse newDB[18G[9G[Jdb.items.createIndex({"index": "hashed"})[50G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jdb.items.createIndex({"index": "hashed"})[50G[9G[Jdb.items.createIndex[1;34m([0m{"index": "hashed"})[49G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=500000; i<550000; i++) { db.newCol.insert({key: i})  }[74G[9G[Juse newDB[18G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[53G[9G[Juse admin[18G[9G[Jdb.newCol.createIndex({key: 1 })[41G[9G[Jdb.newCol.createIndex[1;34m([0m{key: 1 })[40G[9G[Jdb.newCol.createIndex([1;34m{[0mkey: 1 })[39G[9G[Jdb.newCol.createIndex({key: 1 })[38G[9G[Jdb.newCol.createIndex({key: 1 })[37G[9G[Jdb.newCol.createIndex({key: 1 })[36G[9G[Jdb.newCol.createIndex({key: 1 })[35G[9G[Jdb.newCol.createIndex({key: 1 })[34G[9G[Jdb.newCol.createIndex({key: 1 })[33G[9G[Jdb.newCol.createIndex({key: 1 })[32G[9G[Jdb.newCol.createIndex({"key: 1 })[33G[9G[Jdb.newCol.createIndex({"key: 1 })[34G[9G[Jdb.newCol.createIndex({"key: 1 })[35G[9G[Jdb.newCol.createIndex({"key: 1 })[36G[9G[Jdb.newCol.createIndex({"key": 1 })[37G[9G[Jdb.newCol.createIndex({"key": 1 })[43G
{
	"raw" : {
		"banana/10.20.16.110:30002,10.20.16.111:30002,10.20.16.112:30002" : {
			"createdCollectionAutomatically" : true,
			"numIndexesBefore" : 1,
			"numIndexesAfter" : 2,
			"ok" : 1
		}
	},
	"ok" : 1,
	"operationTime" : Timestamp(1592305915, 2),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1592305915, 2),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
mongos> [9G[Jdb.newCol.createIndex({"key": 1 })[43G[9G[Juse newDB[18G[9G[Jsh.enableSharding("newDB")[35G[9G[Juse admin[18G[9G[Jsh.enableSharding("newDB")[35G[9G[Juse admin[18G[9G[Jsh.enableSharding("newDB")[35G[9G[Juse newDB[18G[9G[Jdb.newCol.createIndex({"key": 1 })[43G[9G[J[9Guse admin[9G[Juse admin[18G
switched to db admin
mongos> [9G[Juse admin[18G[9G[Jdb.newCol.createIndex({"key": 1 })[43G[9G[Juse newDB[18G[9G[Jsh.enableSharding("newDB")[35G[9G[Juse admin[18G[9G[Jdb.dropDatabase()[26G[9G[Jsh.status()[20G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Juse newDB[18G[9G[Jsh.status()[20G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[74G[9G[Juse newDB[18G[9G[Jdb.items.createIndex({"index": "hashed"})[50G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jdb.items.createIndex({"index": "hashed"})[50G[9G[Juse newDB[18G[9G[Jdb.items.createIndex({"index": "hashed"})[50G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jdb.items.createIndex({"index": "hashed"})[50G[9G[Juse newDB[18G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jsh.status()[20G[9G[Juse newDB[18G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jsh.status()[20G[9G[Jdb.dropDatabase()[26G[9G[Juse admin[18G[9G[Jdb.dropDatabase()[26G[9G[Jsh.status()[20G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Juse newDB[18G[9G[Jsh.status()[20G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[74G[9G[Juse newDB[18G[9G[Jdb.items.createIndex({"index": "hashed"})[50G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=500000; i<550000; i++) { db.newCol.insert({key: i})  }[74G[9G[Juse newDB[18G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[53G[9G[Juse admin[18G[9G[Jdb.newCol.createIndex({key: 1 })[41G[9G[Juse newDB[18G[9G[Jdb.newCol.createIndex({key: 1 })[41G[9G[Juse newDB[18G[9G[Jdb.newCol.createIndex({key: 1 })[41G[9G[Juse admin[18G[9G[Jdb.newCol.createIndex({key: 1 })[41G[9G[Juse newDB[18G[9G[Jdb.newCol.createIndex({key: 1 })[41G[9G[Jsh.enableSharding("newDB")[35G[9G[Juse admin[18G[9G[Jsh.enableSharding9[27G[9G[Juse admin[18G[9G[Jdb.dropDatabase()[26G[9G[Jdb.dropDase()[22G[9G[Juse newDB[18G[9G[Jsh.status()[20G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=500000; i<530000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=10000; i<30000; i++) { db.newCol.insert({key: i})  }[72G[9G[Jdb.newCol.count()[26G[9G[Juse newDB[18G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=10000; i<30000; i++) { db.newCol.insert({key: i})  }[72G[9G[Juse newDB[18G[9G[Juse newDB[18G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=10000; i<30000; i++) { db.newCol.insert({key: i})  }[72G[9G[Juse newDB[18G[9G[Jfor (var i=10000; i<30000; i++) { db.newCol.insert({key: i})  }[72G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Juse newDB[18G[9G[Juse newDB[18G[9G[Jfor (var i=10000; i<30000; i++) { db.newCol.insert({key: i})  }[72G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Juse newDB[18G[9G[Jdb.newCol.count()[26G[9G[Jfor (var i=10000; i<30000; i++) { db.newCol.insert({key: i})  }[72G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=500000; i<530000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jsh.status()[20G[9G[Juse newDB[18G[9G[Jdb.dropDase()[22G[9G[Jdb.dropDatabase()[26G[9G[Juse admin[18G[9G[Jsh.enableSharding9[27G[9G[Juse admin[18G[9G[Jsh.enableSharding("newDB")[35G[9G[Jdb.newCol.createIndex({key: 1 })[41G[9G[Juse newDB[18G[9G[Jdb.newCol.createIndex({key: 1 })[41G[9G[Juse admin[18G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[53G[9G[Juse newDB[18G[9G[Jfor (var i=500000; i<550000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jfor (var i=100000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jdb.items.createIndex({"index": "hashed"})[50G[9G[Juse newDB[18G[9G[Jfor (var i=140000; i<190000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jdb.adminCommand( {getLog: "global"} )[46G[9G[Jsh.status()[20G[9G[Juse newDB[18G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jsh.status()[20G[9G[Jdb.dropDatabase()[26G[9G[Juse admin[18G[9G[Jsh.enableSharding("newDB")[35G[9G[Juse newDB[18G[9G[Jdb.newCol.createIndex({"key": 1 })[43G[9G[Juse admin[18G[9G[J[9G[9G[J[9G[1G[J(reverse-i-search)`': [23G[1G[J(reverse-i-search)`C': db.newCol.createIndex({"key": 1 })[30G[1G[J(reverse-i-search)`Co': db.newCol.createIndex({"key": 1 })[31G[1G[J(reverse-i-search)`Col': db.newCol.createIndex({"key": 1 })[32G[1G[J(reverse-i-search)`Coll': sh.shardCollection("newDB.newCol",{"key":1})[35G[1G[Jmongos> sh.shardCollection("newDB.newCol",{"key":1})[17G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[18G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[19G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[20G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[21G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[22G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[23G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[24G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[25G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[26G[9G[Jsh.shardCollection("newDB.newCol",{"key":1}[1;34m)[0m[27G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[28G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[29G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[30G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[31G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[32G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[33G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[34G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[35G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[36G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[37G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[38G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[39G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[40G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[41G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[42G[9G[Jsh.shardCollection("newDB.newCol",{"key":1[1;34m}[0m)[43G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[44G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[45G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[46G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[53G
{
	"collectionsharded" : "newDB.newCol",
	"collectionUUID" : UUID("eac6f5fc-1464-4f06-a889-138883d1c0fc"),
	"ok" : 1,
	"operationTime" : Timestamp(1592305959, 11),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1592305959, 11),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
mongos> use a[9G[Juse [13GnewDB[9G[Juse newDB[18G
switched to db newDB
mongos> [9G[Juse newDB[18G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[53G[9G[Juse admin[18G[9G[Jdb.newCol.createIndex({"key": 1 })[43G[9G[Juse newDB[18G[9G[Jsh.enableSharding("newDB")[35G[9G[Juse admin[18G[9G[Jdb.dropDatabase()[26G[9G[Jsh.status()[20G[9G[Jfor (var i=140000; i<150000; i++) { db.newCol.insert({key: i})  }[74G[9G[Jsh.status()[20G[9G[Jdb.dropDatabase()[26G[9G[Juse admin[18G[9G[Jsh.enableSharding("newDB")[35G[9G[Juse newDB[18G[9G[Jdb.newCol.createIndex({"key": 1 })[43G[9G[Juse admin[18G[9G[Jsh.shardCollection("newDB.newCol",{"key":1})[53G[9G[Juse newDB[18G[9G[J[9G[9G[J[9G^C
bye
